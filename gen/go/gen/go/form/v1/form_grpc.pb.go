// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/form.proto

package formv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FormService_GetFormSchema_FullMethodName = "/form.v1.FormService/GetFormSchema"
	FormService_CreateForm_FullMethodName    = "/form.v1.FormService/CreateForm"
	FormService_SubmitForm_FullMethodName    = "/form.v1.FormService/SubmitForm"
)

// FormServiceClient is the client API for FormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormServiceClient interface {
	GetFormSchema(ctx context.Context, in *FormRequest, opts ...grpc.CallOption) (*FormDefinition, error)
	CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error)
	SubmitForm(ctx context.Context, in *SubmitFormRequest, opts ...grpc.CallOption) (*SubmitFormResponse, error)
}

type formServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormServiceClient(cc grpc.ClientConnInterface) FormServiceClient {
	return &formServiceClient{cc}
}

func (c *formServiceClient) GetFormSchema(ctx context.Context, in *FormRequest, opts ...grpc.CallOption) (*FormDefinition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormDefinition)
	err := c.cc.Invoke(ctx, FormService_GetFormSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFormResponse)
	err := c.cc.Invoke(ctx, FormService_CreateForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) SubmitForm(ctx context.Context, in *SubmitFormRequest, opts ...grpc.CallOption) (*SubmitFormResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitFormResponse)
	err := c.cc.Invoke(ctx, FormService_SubmitForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServiceServer is the server API for FormService service.
// All implementations must embed UnimplementedFormServiceServer
// for forward compatibility.
type FormServiceServer interface {
	GetFormSchema(context.Context, *FormRequest) (*FormDefinition, error)
	CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error)
	SubmitForm(context.Context, *SubmitFormRequest) (*SubmitFormResponse, error)
	mustEmbedUnimplementedFormServiceServer()
}

// UnimplementedFormServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFormServiceServer struct{}

func (UnimplementedFormServiceServer) GetFormSchema(context.Context, *FormRequest) (*FormDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormSchema not implemented")
}
func (UnimplementedFormServiceServer) CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (UnimplementedFormServiceServer) SubmitForm(context.Context, *SubmitFormRequest) (*SubmitFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitForm not implemented")
}
func (UnimplementedFormServiceServer) mustEmbedUnimplementedFormServiceServer() {}
func (UnimplementedFormServiceServer) testEmbeddedByValue()                     {}

// UnsafeFormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServiceServer will
// result in compilation errors.
type UnsafeFormServiceServer interface {
	mustEmbedUnimplementedFormServiceServer()
}

func RegisterFormServiceServer(s grpc.ServiceRegistrar, srv FormServiceServer) {
	// If the following call pancis, it indicates UnimplementedFormServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FormService_ServiceDesc, srv)
}

func _FormService_GetFormSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormSchema(ctx, req.(*FormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateForm(ctx, req.(*CreateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_SubmitForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).SubmitForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_SubmitForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).SubmitForm(ctx, req.(*SubmitFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormService_ServiceDesc is the grpc.ServiceDesc for FormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "form.v1.FormService",
	HandlerType: (*FormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormSchema",
			Handler:    _FormService_GetFormSchema_Handler,
		},
		{
			MethodName: "CreateForm",
			Handler:    _FormService_CreateForm_Handler,
		},
		{
			MethodName: "SubmitForm",
			Handler:    _FormService_SubmitForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/form.proto",
}
